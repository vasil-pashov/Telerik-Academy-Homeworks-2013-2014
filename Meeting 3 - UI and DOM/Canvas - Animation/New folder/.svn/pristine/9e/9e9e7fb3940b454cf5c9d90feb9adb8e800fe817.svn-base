<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nsync</name>
    </assembly>
    <members>
        <member name="T:nsync.TrackBackFolder">
            <summary>
            TrackBackFolder performs the actual processes called by TrackBackEngine, such as backing up, restoring, creating metadata, etc.
            </summary>
        </member>
        <member name="M:nsync.TrackBackFolder.#ctor(System.String)">
            <summary>
            Creates TrackBackFolder object to allow querying of data
            </summary>
            <param name="sourcePath">The directory path of the folder to be queried</param>
        </member>
        <member name="M:nsync.TrackBackFolder.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates TrackBackFolder object to prepare for back up
            </summary>
            <param name="sourcePath">The source directory path of the folder to be synchronized</param>
            <param name="destinationPath">The destination directory path of the folder to be synchronized</param>
            <param name="timeStamp">The time and date of the synchronization process</param>
        </member>
        <member name="M:nsync.TrackBackFolder.GetFolderVersions">
            <summary>
            Retrieves a list of folder names of the different versions stored in TrackBack.
            </summary>
            <returns>An array of folder names</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.GetFolderDestinations">
            <summary>
            Retrieves a list of folder paths of the destination the folder was synced to.
            </summary>
            <returns>A string array containing the folder paths</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.GetFolderTimeStamp">
            <summary>
            Retrieves a list of the dates and times of when the sync took place.
            </summary>
            <returns>A string array of dates and times</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.BackupFolder">
            <summary>
            Backups the folder and create the necessary TrackBack files and folders
            </summary>
        </member>
        <member name="M:nsync.TrackBackFolder.RestoreFolder(System.String)">
            <summary>
            Restores the folder back to the selected version
            </summary>
        </member>
        <member name="M:nsync.TrackBackFolder.hasEnoughDiskSpace">
            <summary>
            Checks if there is sufficient disk space for TrackBack to run
            </summary>
            <returns>If there is enough space for the folder to be copied, return true, false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.hasTrackBackData">
            <summary>
            Checks if the folder has any previous stored versions in TrackBack. An additional
            <para>check is done to ensure that the data is intact and not corrupted.</para>
            </summary>
            <returns>If the folder has stored previous folder versions and the data is valid,
            <para>return true, false otherwise.</para></returns>
        </member>
        <member name="M:nsync.TrackBackFolder.isTrackBackXMLValid">
            <summary>
            Checks to ensure that the XML document is valid. The document is valid if
            <para>the number of folders inside "_nsync_trackback" is the same as</para>
            <para>the number of folders found inside XML document.</para>
            </summary>
            <returns>If valid, return true. Return false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.CopyFolder(System.String,System.String)">
            <summary>
            Copies the folder contents from source to destination
            </summary>
            <param name="sourceFolder">The folder to be copied</param>
            <param name="destinationFolder">The new folder that will contain the new contents</param>
        </member>
        <member name="M:nsync.TrackBackFolder.CreateFolder(System.String,System.Boolean)">
            <summary>
            Creates a folder and sets its attributes according to the boolean variable
            </summary>
            <param name="path">The path of the folder to be created</param>
            <param name="isHidden">If true, set the folder as hidden. Else, do nothing.</param>
            <returns>The resultant folder</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.DeleteSubfolders(System.IO.DirectoryInfo)">
            <summary>
            Deletes all subfolders in a given folder (Note: "_nsync_trackback" is not
            <para>deleted in this method)</para>
            </summary>
            <param name="folder">The folder that contains the subfolders to be deleted</param>
        </member>
        <member name="M:nsync.TrackBackFolder.DeleteFiles(System.IO.DirectoryInfo)">
            <summary>
            Deletes all files in a given folder, ignores files that are denied access
            <para>due to insufficient access rights.</para>
            </summary>
            <param name="folder">The folder that contains the files to be deleted</param>
        </member>
        <member name="M:nsync.TrackBackFolder.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory recursively. This method differs from Directory Delete method in that
            <para>it is able to remove read-only files as well.</para>
            </summary>
            <param name="directory">The directory path that is to be deleted</param>
        </member>
        <member name="M:nsync.TrackBackFolder.GetFreeDiskSpaceInBytes(System.String)">
            <summary>
            Computes the amount of free disk space
            <para>Units is in bytes</para>
            </summary>
            <param name="drive">This parameter is the drive volume to be checked</param>
            <returns>Amount of disk space in bytes, represented by 64-bit unsigned integer</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.GetDirectorySpaceInBytes(System.IO.DirectoryInfo)">
            <summary>
            Calculates the directory spaced needed in bytes.
            </summary>
            <param name="directory">The directory to be checked</param>
            <returns>Amount of disk space in bytes, represented by 64-bit unsigned integer</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.CreateTrackBackXml">
            <summary>
            Creates the metadata file for TrackBack
            </summary>
        </member>
        <member name="M:nsync.TrackBackFolder.SaveTrackBackSession(System.String,System.String,System.String)">
            <summary>
            Saves the latest sync session to the metadata file
            </summary>
            <param name="sourcePath">The file path of the source directory</param>
            <param name="destinationPath">The file path of the destination directory</param>
            <param name="timeStamp">The time and date when the sync is carried out</param>
        </member>
        <member name="M:nsync.TrackBackFolder.GetDateTimeList(System.Xml.XmlDocument)">
            <summary>
            Extracts and compiles the DateTime objects found in the XML document into an array
            </summary>
            <param name="document">The XML document that contains the DateTime objects</param>
            <returns>An array of DateTime objects</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.GetEarliestSession(System.DateTime[])">
            <summary>
            Retrieves the outdated session in the TrackBack system
            </summary>
            <param name="list">An array of DateTime objects to be compared</param>
            <returns>The outdated DateTime object</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.ContainsFolder(System.IO.DirectoryInfo[],System.String)">
            <summary>
            Checks if the folder list contains the specified search key
            </summary>
            <param name="list">The folder list to be searched</param>
            <param name="key">The search key</param>
            <returns></returns>
        </member>
        <member name="M:nsync.TrackBackFolder.IsDirectoryAccessible(System.String)">
            <summary>
            Checks if the folder has restricted access permissions
            </summary>
            <param name="directory">The path of the directory to be checked</param>
            <returns>If the folder can be accessed, return true. Return false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackFolder.IsFileAccessible(System.String)">
            <summary>
            Checks if the file has restricted access permissions
            </summary>
            <param name="filePath">The path of the file to be checked</param>
            <returns>If the file can be accessed, return true. Return false otherwise.</returns>
        </member>
        <member name="T:nsync.Intelligence">
            <summary>
            Intelligence performs various checks necessary for the other classes to perform.
            </summary>
        </member>
        <member name="M:nsync.Intelligence.IsThereFilesInRootPath(System.String)">
            <summary>
            Check if there is any files inside the provided path
            </summary>
            <param name="path">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path has any files</returns>
        </member>
        <member name="M:nsync.Intelligence.IsPathRoot(System.String)">
            <summary>
            Checks if a path is the root path
            </summary>
            <param name="path">This string is the path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path is a root path</returns>
        </member>
        <member name="M:nsync.Intelligence.IsFolderExists(System.String)">
            <summary>
            Checks if the folder path exists
            </summary>
            <param name="folderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path exists</returns>
        </member>
        <member name="M:nsync.Intelligence.IsFoldersSimilar(System.String,System.String)">
            <summary>
            Checks if two folder paths are similar
            </summary>
            <param name="leftFolderPath">This parameter is the folder path to be checked</param>
            <param name="rightFolderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if both folder paths are similar</returns>
        </member>
        <member name="M:nsync.Intelligence.IsFolderSubFolder(System.String,System.String)">
            <summary>
            Checks if a folder is a subfolder of another
            </summary>
            <param name="leftFolderPath">This parameter is the folder path to be checked</param>
            <param name="rightFolderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if a folder is a subfolder of another</returns>
        </member>
        <member name="M:nsync.Intelligence.IsRemovableDrive(System.String)">
            <summary>
            Checks if the folder path belongs to a removable drive
            </summary>
            <param name="path">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path belongs to a removable drive</returns>
        </member>
        <member name="M:nsync.Intelligence.FindRemoveableDiskSerialNumber(System.String)">
            <summary>
            Finds the unique serial number of the removeable disk
            </summary>
            <param name="path">This parameter is the directory to be checked</param>
            <returns>Returns a string which contains the serial number of the removeable disk
            <para>Returns null if the directory is not a removeable disk</para></returns>
        </member>
        <member name="M:nsync.Intelligence.IsSamePath(System.String[],System.String[])">
            <summary>
            Compares the folder paths of the input arrays and determine if they
            have the same path from the root directory.
            </summary>
            <param name="sourceArray">Array of a folder path to be checked</param>
            <param name="destinationArray">Array of a folder path to be checked</param>
            <returns></returns>
        </member>
        <member name="T:nsync.HomePage">
            <summary>
            Interaction logic for HomePage.xaml
            </summary>
            <summary>
            HomePage
            </summary>
        </member>
        <member name="M:nsync.HomePage.#ctor">
            <summary>
            Constructor for HomePage class
            </summary>
        </member>
        <member name="M:nsync.HomePage.IsErrorClosing">
            <summary>
            Sets isErrorClosing to true when there is error
            </summary>
        </member>
        <member name="M:nsync.HomePage.Page_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method will be called when HomePage is loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.Page_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when HomePage is unloaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.mainWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            This method will be called when the position of mainWindow is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.mainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is called when nsync is exited
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ResolveShortcut(System.String)">
            <summary>
            This method resolves a shortcut link
            </summary>
            <param name="path">This parameter is a string which is the shortcut path to be resolved</param>
            <returns>Returns a string which contains the path of the resolved shortcut</returns>
        </member>
        <member name="M:nsync.HomePage.IsPathShortcut(System.String)">
            <summary>
            This method checks if the path is a shortcut link
            </summary>
            <param name="path">This parameter is the path to be checked</param>
            <returns>Returns a boolean which indicates whether the path is a shortcut link</returns>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag and drop something into the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag and drop something into the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_DragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, something into the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_DragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, something into the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_DragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, and instead drag out of the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_DragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, and instead drag out of the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.LeftIcon_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.RightIcon_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.EnableBox(System.Boolean)">
            <summary>
            This method enables or disables the leftBox and rightBox
            </summary>
            <param name="enableOrDisable">True to enable, False to disable</param>
        </member>
        <member name="M:nsync.HomePage.FolderSelect(System.String)">
            <summary>
            Opens the browser dialog for user to choose a folder path
            </summary>
            <param name="originalPath">This parameter provides the starting point for the browser dialog</param>
            <returns>Returns the selected folder path from the browser dialog</returns>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters leftbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves leftbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters rightbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves rightbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ShowRemovableDrives(System.String,System.String)">
            <summary>
            Change the leftbox/rightbox icon if folder path is a removeable drive
            </summary>
            <param name="path"></param>
            <param name="leftOrRight"></param>
        </member>
        <member name="M:nsync.HomePage.IsFolderExist">
            <summary>
            Checks if folder paths exist
            </summary>
            <returns>Return a boolean to determine if folder paths exist</returns>
        </member>
        <member name="M:nsync.HomePage.IsFoldersSimilar">
            <summary>
            Checks if folders are similar
            </summary>
            <returns>Return a boolean to determine if folder paths are similar</returns>
        </member>
        <member name="M:nsync.HomePage.IsFolderSubfolder">
            <summary>
            Checks if one folder is a subfolder of another
            </summary>
            <returns>Return a boolean to determine if one folder is subfolder of another</returns>
        </member>
        <member name="M:nsync.HomePage.ShowSync">
            <summary>
            Checks if the sync button should appear
            </summary>
            <returns>Return a boolean to determine if sync button should appear</returns>
        </member>
        <member name="M:nsync.HomePage.RefreshToolTips">
            <summary>
            Update tooltips
            </summary>
        </member>
        <member name="M:nsync.HomePage.SaveFolderPaths">
            <summary>
            Saves folder paths to settings.xml
            </summary>
        </member>
        <member name="M:nsync.HomePage.ReloadFolderPaths">
            <summary>
            Reload folder paths on MRU list
            </summary>
        </member>
        <member name="M:nsync.HomePage.LoadFolderPaths">
            <summary>
            Load folder paths from settings.xml
            </summary>
        </member>
        <member name="M:nsync.HomePage.PathCompactPathEx(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Use Win32 Api for shortening paths
            </summary>
            <param name="pszOut"></param>
            <param name="szPath"></param>
            <param name="cchMax"></param>
            <param name="dwFlags"></param>
            <returns></returns>
        </member>
        <member name="M:nsync.HomePage.ShortenPath(System.String,System.Int32)">
            <summary>
            Shortens folder path for MRU list
            </summary>
            <param name="oldPath">The path that is to be shortened is passed in</param>
            <param name="maxLength">The maximum length to allow for the path</param>
            <returns>A string containing the new folder path is returned</returns>
        </member>
        <member name="M:nsync.HomePage.listBoxRight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer leaves right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxLeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer leaves left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxLeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer enters left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxRight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer enters right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ListBoxLeft_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user click on left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ListBoxRight_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user click on right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ButtonSync_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user click on the sync button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.IsDirectoryAccessible(System.String)">
            <summary>
            Checks if a directory is locked/protected (doesn't have access rights), just the directory itself
            </summary>
            <param name="directoryPath">The path of the directory to check</param>
            <returns>true if directory is accessible</returns>
        </member>
        <member name="M:nsync.HomePage.excludeWindow_LogError(System.String)">
            <summary>
            Error handler when exclude windows background worker encounters an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:nsync.HomePage.excludeWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is called when exclude window closes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.RevertBackToOldFolderPair">
            <summary>
            Revert both paths back to their original paths before they were changed
            </summary>
        </member>
        <member name="M:nsync.HomePage.SaveCurrentFolderPair">
            <summary>
            Saves the current paths for later use
            </summary>
        </member>
        <member name="M:nsync.HomePage.SyncToTheSameFolderHierarchy(System.String)">
            <summary>
            Try to change the 2 folder path to the appropriate folder hierarchy, if possible
            </summary>
            <param name="leftOrRight">This parameter indicates if the target path is leftPath or rightPath</param>
        </member>
        <member name="M:nsync.HomePage.helper_HyperTextMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the hyperlink to revert the original folder path
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.DisplayCorrectIcons">
            <summary>
            Displays the correct images for the left and right box accordingly
            </summary>
        </member>
        <member name="M:nsync.HomePage.SaveFolderPathsForRemoveableDisk">
            <summary>
            Save the folder paths into settings.xml if the folder path involves a removeable disk
            </summary>
        </member>
        <member name="M:nsync.HomePage.RememberLastRemoveableDiskSync(System.String)">
            <summary>
            Try to get and replace actualLeftPath and actualRightPath with the last synced folder pair for a removeable disk
            </summary>
            <param name="leftOrRight">This parameter indicates if the removeable disk is actualLeftPath or actualRightPath</param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForSync_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            This method is called when progress percentage has changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.EnableInterface(System.Boolean)">
            <summary>
            Enable or disable the user interface after and during synchronization
            </summary>
            <param name="enableOrDisable">This boolean determines whether to disable or enable the interface</param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForPreSync_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when presync calculations are completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForTrackBackBackup_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when the TrackBack has finished backing up the folders
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForSync_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when when synchronization is completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForSummary_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when when summary sychronization is completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ButtonPreview_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when the preview button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForPreview_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when when preview sychronization is completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.WindowVisualPreview_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is called when preview window closes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.SyncingImage_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when user points the mouse pointer on the rotating sync image
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ButtonStop_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when user moves the mouse pointer outside of the rotating sync image
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ButtonStop_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the stop sync button during sync
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.HomePage.InstallState">
            <summary>
            InstallState
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.NotUsed">
            <summary>
            NotUsed
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.BadConfig">
            <summary>
            BadConfig
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Incomplete">
            <summary>
            Incomplete
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.SourceAbsent">
            <summary>
            SourceAbsent
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.MoreData">
            <summary>
            MoreData
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.InvalidArg">
            <summary>
            InvalidArg
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Broken">
            <summary>
            Broken
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Advertised">
            <summary>
            Advertised
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Removed">
            <summary>
            Removed
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Absent">
            <summary>
            Absent
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="F:nsync.HomePage.InstallState.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:nsync.TrackBackPage">
            <summary>
            Interaction logic for TrackBackPage.xaml
            </summary>
            <summary>
            TrackBackPage
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.#ctor">
            <summary>
            TrackBackPage Contructor
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.LoadTrackBackXML">
            <summary>
            Loads the TrackBack XML document
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.AddTrackBackEntryForLeftFolder(System.String,System.String,System.String)">
            <summary>
            Adds an entry into the trackback list view
            </summary>
            <param name="trackBackName">Name of the folder</param>
            <param name="trackBackDate">Date and time of the folder</param>
            <param name="trackBackFolder">Destination folder it was synced with</param>
        </member>
        <member name="M:nsync.TrackBackPage.AddTrackBackEntryForRightFolder(System.String,System.String,System.String)">
            <summary>
            Adds an entry into the trackback list view
            </summary>
            <param name="trackBackName">Name of the folder</param>
            <param name="trackBackDate">Date and time of the folder</param>
            <param name="trackBackFolder">Destination folder it was synced with</param>
        </member>
        <member name="M:nsync.TrackBackPage.Page_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Page is loaded, initialise listview
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.mainWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            This method will be called when the position of mainWindow is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.SortClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event called on clicking on the header of a column
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.SortList(System.String,System.ComponentModel.ListSortDirection,System.Windows.Controls.ListView)">
            <summary>
            Sorting method to sort a listview
            </summary>
            <param name="sortBy">Data name/parameter to sort by as a string</param>
            <param name="direction">Ascending or descending order</param>
            <param name="listView">List View to be sorted</param>
        </member>
        <member name="M:nsync.TrackBackPage.LoadSourceFolders">
            <summary>
            Loads the folder names into the combo box
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.AddComboBoxItem(System.String)">
            <summary>
            Adds an item to the combo box
            </summary>
            <param name="itemName">The name of the item to be added</param>
        </member>
        <member name="M:nsync.TrackBackPage.LoadTrackBackEntriesForLeftFolder">
            <summary>
            Loads the trackback entries for the left folder into the listview
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.LoadTrackBackEntriesForRightFolder">
            <summary>
            Loads the trackback entries for the right folder into the listview
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.LoadDataFromTrackBackData(System.String)">
            <summary>
            Loads the data from TrackBack XML document into the arrays for storing
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:nsync.TrackBackPage.ComboBoxSourceFolder_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the event when the combo box selected item is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.ButtonRestore_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the Restore button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.GetSelectedComboBoxItem">
            <summary>
            Gets the value of the selected item in combo box
            </summary>
            <returns>The string representation of the selected item</returns>
        </member>
        <member name="M:nsync.TrackBackPage.GetSelectedListViewItem(System.Windows.Controls.ListView)">
            <summary>
            Gets the value of the selected item in list view
            </summary>
            <param name="listView">The list view selected</param>
            <returns>The string representation of the selected item</returns>
        </member>
        <member name="M:nsync.TrackBackPage.GetOriginalFolderPath(System.String)">
            <summary>
            Gets the orignial path of the folder
            </summary>
            <param name="shortenedFolderPath">The shortened folder path</param>
            <returns>The original folder path</returns>
        </member>
        <member name="M:nsync.TrackBackPage.EnableInterface(System.Boolean)">
            <summary>
            Enables or disables the interface after and during restoring of folders
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:nsync.TrackBackPage.DisplayErrorInterface">
            <summary>
            Displays the interface components when there is an error
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.DisplayListViewForLeftFolderOnly(System.Boolean)">
            <summary>
            Displays the list view for left folder only
            </summary>
            <param name="status">If true, enable the interface. Else, disable the interface.</param>
        </member>
        <member name="M:nsync.TrackBackPage.DisplayListViewForRightFolderOnly(System.Boolean)">
            <summary>
            Displays the list view for right folder only
            </summary>
            <param name="status">If true, enable the interface. Else, disable the interface.</param>
        </member>
        <member name="M:nsync.TrackBackPage.HideListViewForBothFolders(System.Boolean)">
            <summary>
            Hides the list view for both folders
            </summary>
            <param name="status">If true, enable the interface. Else, disable the interface.</param>
        </member>
        <member name="M:nsync.TrackBackPage.backgroundWorkerForTrackBackRestore_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when the background worker has finished restoring the folders
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.PathCompactPathEx(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Use Win32 Api for shortening paths
            </summary>
            <param name="pszOut"></param>
            <param name="szPath"></param>
            <param name="cchMax"></param>
            <param name="dwFlags"></param>
            <returns></returns>
        </member>
        <member name="M:nsync.TrackBackPage.ShortenPath(System.String,System.Int32)">
            <summary>
            Shortens folder path for MRU list
            </summary>
            <param name="oldPath">The path that is to be shortened is passed in</param>
            <param name="maxLength">The maximum length that the path should be shortened</param>
            <returns>A string containing the new folder path is returned</returns>
        </member>
        <member name="M:nsync.TrackBackPage.ListViewForLeftFolder_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This method is called when the left folder list view selection is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.ListViewForRightFolder_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This method is called when the right folder list view selection is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:nsync.TrackBackPage.TrackBackCollectionForLeftFolder">
            <summary>
            Property of the trackback collection (for left folder) used in binding
            </summary>
        </member>
        <member name="P:nsync.TrackBackPage.TrackBackCollectionForRightFolder">
            <summary>
            Property of the trackback collection (for right folder) used in binding
            </summary>
        </member>
        <member name="T:nsync.TrackBackItemData">
            <summary>
            Class of trackback item data, for binding
            </summary>
        </member>
        <member name="P:nsync.TrackBackItemData.nameItem">
            <summary>
            Property for left item column
            </summary>
        </member>
        <member name="P:nsync.TrackBackItemData.dateItem">
            <summary>
            Property for action column
            </summary>
        </member>
        <member name="P:nsync.TrackBackItemData.folderItem">
            <summary>
            Property for right item column
            </summary>
        </member>
        <member name="T:nsync.Preview">
            <summary>
            Preview is responsible for generating a report on what changes will take place after nsync performs the synchronization.
            </summary>
        </member>
        <member name="F:nsync.Preview.backgroundWorkerForPreview">
            <summary>
            BackgroundWorkerForPreview Component
            </summary>
        </member>
        <member name="F:nsync.Preview.backgroundWorkerForSummary">
            <summary>
            BackgroundWorkerForSummary Component
            </summary>
        </member>
        <member name="M:nsync.Preview.#ctor">
            <summary>
            Constructor for Preview
            </summary>
        </member>
        <member name="M:nsync.Preview.PreviewSync">
            <summary>
            Gets backgroundWorkerForPreview to do synchronization preparations
            </summary>
        </member>
        <member name="M:nsync.Preview.SummarySync">
            <summary>
            Gets backgroundWorkerForSummary to do synchronization preparations
            </summary>
        </member>
        <member name="M:nsync.Preview.GetData">
            <summary>
            Does sync operation and returns list of file data
            </summary>
            <returns>Returns a list of file data objects</returns>
        </member>
        <member name="M:nsync.Preview.backgroundWorkerForPreview_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForPreview is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.Preview.backgroundWorkerForSummary_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForSummary is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.Preview.InternalPreviewSync">
            <summary>
            Does Sync operation to store change events into a list of FileData objects
            </summary>
        </member>
        <member name="M:nsync.Preview.DetectChangesonFileSystemReplica(System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions)">
            <summary>
            Detect the changes done to the folder
            <para>Updates the metadata</para>
            </summary>
            <param name="replicaRootPath">This parameter is the folder path to be checked</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
        </member>
        <member name="M:nsync.Preview.SyncFileSystemReplicasOneWay(System.String,System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions)">
            <summary>
            Start the synchronization in one direction
            </summary>
            <param name="sourcePath">This parameter holds the source folder path</param>
            <param name="destPath">This parameter holds the destination folder path</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
        </member>
        <member name="M:nsync.Preview.OnApplyingChange(System.Object,Microsoft.Synchronization.Files.ApplyingChangeEventArgs)">
            <summary>
            This method is called when changes are going to be done to a file
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.Preview.OnItemConflicting(System.Object,Microsoft.Synchronization.ItemConflictingEventArgs)">
            <summary>
            This method is called when there are conflicting items during synchronization
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.Preview.OnItemConstraint(System.Object,Microsoft.Synchronization.ItemConstraintEventArgs)">
            <summary>
            This method is called when there are constraint items during synchronization
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:nsync.Preview.LeftPath">
            <summary>
            Setter and Getter method for left folder path
            </summary>
        </member>
        <member name="P:nsync.Preview.RightPath">
            <summary>
            Setter and Getter method for right folder path
            </summary>
        </member>
        <member name="P:nsync.Preview.ExcludeData">
            <summary>
            Setter method for filters in ExcludeData
            </summary>
        </member>
        <member name="T:nsync.ExcludeData">
            <summary>
            ExcludeData provides the functionalities for the different types of filters.
            </summary>
        </member>
        <member name="M:nsync.ExcludeData.#ctor">
            <summary>
            Constructor of ExcludeData class
            </summary>
        </member>
        <member name="M:nsync.ExcludeData.AddExcludeFileType(System.String)">
            <summary>
            Add method to add fileType to exclude List
            </summary>
        </member>
        <member name="M:nsync.ExcludeData.AddExcludeFileName(System.String)">
            <summary>
            Add method to add fileName to exclude List
            </summary>
        </member>
        <member name="M:nsync.ExcludeData.AddExcludeFolder(System.String)">
            <summary>
            Add method to add folder to exclude List
            </summary>
        </member>
        <member name="P:nsync.ExcludeData.ExcludeFileTypeList">
            <summary>
            Setter and Getter method exclude list which contains file types
            </summary>
        </member>
        <member name="P:nsync.ExcludeData.ExcludeFileNameList">
            <summary>
            Setter and Getter method exclude list which contains file names
            </summary>
        </member>
        <member name="P:nsync.ExcludeData.ExcludeFolderList">
            <summary>
            Setter and Getter method exclude list which contains folder
            </summary>
        </member>
        <member name="T:nsync.SyncEngine">
            <summary>
            SyncEngine is responsible for performing pre-synchronization and the actual aynchronization process.
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.#ctor">
            <summary>
            Constructor for SyncEngine
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.SyncToTheSameFolderHierarchy(System.String,System.String[],System.String)">
            <summary>
            Try to provide 2 new folder path using the appropriate folder hierarchy
            </summary>
            <param name="targetPath">This parameter holds a string which contains the target folder path to be checked</param>
            <param name="lastSyncFolderPaths">This parameter holds a list of strings which contains the last sync folder paths</param>
            <param name="leftOrRight">This parameter indicates if the target path is leftPath or rightPath</param>
            <returns>Returns the new folder path if it's valid<para>Otherwise, null is returned</para></returns>
        </member>
        <member name="M:nsync.SyncEngine.GetRemovableDiskSerialNumberWithChecks(System.String)">
            <summary>
            Try to get the serial number of removable disk if path is a removeable disk
            </summary>
            <param name="path">This parameter indicates the path to be checked</param>
            <returns>Returns a string which contains the serial number of the removeable disk, if it exists
            <para>Otherwise, return null</para></returns>
        </member>
        <member name="M:nsync.SyncEngine.GetRemovableDiskSerialNumber(System.String)">
            <summary>
            Gets the removeable disk serial number
            </summary>
            <param name="path">This parameter indicates the path to be checked</param>
            <returns>Returns a string which contains the serial number of the removeable disk
            <para>Returns a null if path is not removeable disk</para></returns>
        </member>
        <member name="M:nsync.SyncEngine.IsPathRemovableDisk(System.String)">
            <summary>
            Checks if a path is a removeable disk
            </summary>
            <param name="path">This parameter indicates the path to be checked</param>
            <returns>Returns a boolean which indicates if the path is a removeable disk</returns>
        </member>
        <member name="M:nsync.SyncEngine.PreSync">
            <summary>
            Gets backgroundWorkerForPreSync to do presync preparations
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.StartSync">
            <summary>
            Get the real synchronization process to start
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.IsFoldersSync">
            <summary>
            Checks if folder paths are already synchronized
            </summary>
            <returns>Return the result which indicates if folder paths are already synchronized</returns>
        </member>
        <member name="M:nsync.SyncEngine.IsFolderSubfolder">
            <summary>
            Asks IntelligentManager to check if a folder is subfolder of another folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsync.SyncEngine.IsFolderExists(System.String)">
            <summary>
            Asks IntelligentManager to check if the left or right folder path exists
            </summary>
            <param name="leftOrRight">This parameter indicates the left or right folder to be checked</param>
            <returns>Returns the result of the check in a boolean</returns>
        </member>
        <member name="M:nsync.SyncEngine.IsFoldersSimilar">
            <summary>
            Asks IntelligentManager to check if the two folder paths are similar
            </summary>
            <returns>Returns the result of the check in a boolean</returns>
        </member>
        <member name="M:nsync.SyncEngine.hasEnoughSpaceInLeftFolder">
            <summary>
            Checks if there is sufficient disk space in left folder
            </summary>
            <returns>Returns a boolean indicating if there is sufficient disk space</returns>
        </member>
        <member name="M:nsync.SyncEngine.hasEnoughSpaceInRightFolder">
            <summary>
            Checks if there is sufficient disk space in right folder
            </summary>
            <returns>Returns a boolean indicating if there is sufficient disk space</returns>
        </member>
        <member name="M:nsync.SyncEngine.GetFreeDiskSpaceInBytes(System.String)">
            <summary>
            Computes the amount of free disk space of a disk drive
            <para>Units is in bytes</para>
            </summary>
            <param name="drive">This parameter is the drive volume to be checked</param>
            <returns>Returns the amount of free disk space in a disk drive</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckSpace">
            <summary>
            Checks if there is sufficient disk space for synchronization to be done
            </summary>
            <returns>Returns a boolean of the result</returns>
        </member>
        <member name="M:nsync.SyncEngine.DetectChangesonFileSystemReplica(System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions)">
            <summary>
            Detect the changes done to the folder
            <para>Updates the metadata</para>
            </summary>
            <param name="replicaRootPath">This parameter is the folder path to be checked</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
        </member>
        <member name="M:nsync.SyncEngine.SyncFileSystemReplicasOneWay(System.String,System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions,System.Boolean)">
            <summary>
            Start the synchronization in one direction
            </summary>
            <param name="sourcePath">This parameter holds the source folder path</param>
            <param name="destPath">This parameter holds the destination folder path</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
            <param name="isPreview">This parameter is a boolean which indicates if this method should be run in preview mode</param>
            <returns>Returns a boolean to indicate if the the synchronization was successful</returns>
        </member>
        <member name="M:nsync.SyncEngine.OnItemConflicting(System.Object,Microsoft.Synchronization.ItemConflictingEventArgs)">
            <summary>
            This method is called when there are conflicting items during synchronization
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.OnAppliedChange(System.Object,Microsoft.Synchronization.Files.AppliedChangeEventArgs)">
            <summary>
            This method is called when changes are done to a file
            <para>Counts the number of changes already done by the sync framework</para>
            <para>Reports the progress percentage to the backgroundWorkerForSync</para>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.OnApplyingChange(System.Object,Microsoft.Synchronization.Files.ApplyingChangeEventArgs)">
            <summary>
            This method is called when changes are going to be done to a file
            <para>Counts the number of changes to be made later during synchronization</para>
            <para>Counts the amount of disk space needed later during synchronization</para>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.backgroundWorkerForSync_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForSync is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SyncEngine.backgroundWorkerForPreSync_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForPreSync is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SyncEngine.InternalPreSync">
            <summary>
            Does actual presync preparations
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsync.SyncEngine.InternalStartSync">
            <summary>
            Starts the synchronization job
            </summary>
            <returns>Returns a boolean to indicate if the synchronization was successful</returns>
        </member>
        <member name="P:nsync.SyncEngine.LeftPath">
            <summary>
            Setter and Getter method for left folder path
            </summary>
        </member>
        <member name="P:nsync.SyncEngine.RightPath">
            <summary>
            Setter and Getter method for right folder path
            </summary>
        </member>
        <member name="P:nsync.SyncEngine.ExcludeData">
            <summary>
            Setter method for filters in ExcludeData
            </summary>
        </member>
        <member name="P:nsync.SyncEngine.ErrorMessageForSummaryReport">
            <summary>
            Getter method for error message for summary report
            </summary>
        </member>
        <member name="T:nsync.MouseUtilities">
            <summary>
            MouseUtilities provides a class to call Win32 API to get the correct mouse position on drag and drop actions.
            </summary>
        </member>
        <member name="M:nsync.MouseUtilities.CorrectGetPosition(System.Windows.Media.Visual)">
            <summary>
            Win32 API to get the correct position of the mouse point on a drag event
            </summary>
            <param name="relativeTo">coordinates relative to an WPF control</param>
            <returns>returns the coordinates as a point object</returns>
        </member>
        <member name="M:nsync.MouseUtilities.GetCursorPos(nsync.MouseUtilities.Win32Point@)">
            <summary>
            imported Win32 API for getting cursor position
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:nsync.MouseUtilities.Win32Point">
            <summary>
            A Win32 point with x,y coordinates
            </summary>
        </member>
        <member name="T:nsync.DebugLogger">
            <summary>
            Provides a debug report on user activities in the event of any program crashes.
            </summary>
        </member>
        <member name="F:nsync.DebugLogger.instance">
            <summary>
            Create an instance of DebugLogger class
            </summary>
        </member>
        <member name="M:nsync.DebugLogger.#ctor">
            <summary>
            Constructor of DebugLogger class
            </summary>
        </member>
        <member name="M:nsync.DebugLogger.ClosingMessage(System.String)">
            <summary>
            Write the last log message to log file and close the file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:nsync.DebugLogger.LogMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Write the log message to the log file
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="callingMethodName"></param>
            <param name="message"></param>
        </member>
        <member name="M:nsync.DebugLogger.LogMessage(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Write the log message to the log file
            <para>Overloaded method to print the exclude filters</para>
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="callingMethodName"></param>
            <param name="message"></param>
            <param name="excludeFileNames"></param>
            <param name="excludeFileTypes"></param>
            <param name="excludeFolders"></param>
        </member>
        <member name="M:nsync.DebugLogger.CreateDebugFolder">
            <summary>
            Check whether debug folder exists. If not create new.
            </summary>
        </member>
        <member name="M:nsync.DebugLogger.CreateNsyncFolder">
            <summary>
            Check whether nsync folder exists. If not create new.
            </summary>
        </member>
        <member name="M:nsync.DebugLogger.SetupDebugFolders">
            <summary>
            Setup the debug logger folders ready for use later.
            </summary>
        </member>
        <member name="M:nsync.DebugLogger.WriteHeaderMessage(System.String)">
            <summary>
            Creates the header of the debug log file
            </summary>
            <param name="debugFileCreationTime">This string holds the timestamp of the file creation</param>
        </member>
        <member name="M:nsync.DebugLogger.WriteLogMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Append log message to the existing log file
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="callingMethodName"></param>
            <param name="message"></param>
        </member>
        <member name="M:nsync.DebugLogger.WriteLogMessage(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Append log message to the existing log file
            <para>Overloaded function for printing exclude filters</para>
            </summary>
            <param name="leftPath"></param>
            <param name="rightPath"></param>
            <param name="callingMethodName"></param>
            <param name="message"></param>
            <param name="excludeFileNames"></param>
            <param name="excludeFileTypes"></param>
            <param name="excludeFolders"></param>
        </member>
        <member name="M:nsync.DebugLogger.BuildFilterString(System.Collections.Generic.List{System.String})">
            <summary>
            Builds a list of string into a single string
            </summary>
            <param name="filter">This parameter contains the list of string to be concat</param>
            <returns></returns>
        </member>
        <member name="M:nsync.DebugLogger.GetSystemInfo(System.String,System.String)">
            <summary>
            Gets the system information as stated by the parameters
            </summary>
            <param name="table"></param>
            <param name="properties"></param>
            <returns>Returns a string which contains the requested system information</returns>
        </member>
        <member name="P:nsync.DebugLogger.Instance">
            <summary>
            Gets the instance of the Settings object
            </summary>
        </member>
        <member name="T:nsync.SettingsPage">
            <summary>
            Interaction logic for SettingsPage.xaml
            </summary>
            <summary>
            SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.#ctor">
            <summary>
            Constructor for SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.CheckSettings">
            <summary>
            Update the checkbox on SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.HelperWindowSliderValue_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Event when comboBox value is changed
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.HelperWindowSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Event when slider value is changed
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.CheckboxToggleExcludeWindow_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event when Exclude Checkbox is checked
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.Settings">
            <summary>
            Settings provides the method calls for other features to customize their options, such as enabling/disabling of features.
            </summary>
        </member>
        <member name="F:nsync.Settings.instance">
            <summary>
            Create an instance of Settings class
            </summary>
        </member>
        <member name="M:nsync.Settings.#ctor">
            <summary>
            Constructor of Settings class
            </summary>
        </member>
        <member name="M:nsync.Settings.SetHelperWindowStatus(System.Int32)">
            <summary>
            Change the status of the HelperWindow which determines the duration it appears in nsync
            </summary>
            <param name="timer">This parameter is an int to indicate how long the HelperWindow should appear</param>
        </member>
        <member name="M:nsync.Settings.GetHelperWindowStatus">
            <summary>
            Gets the current status of the HelperWindow
            </summary>
            <returns>Returns an int which indicates how long the HelperWindow should appear</returns>
        </member>
        <member name="M:nsync.Settings.SetPreviewFilterStatus(System.String)">
            <summary>
            Changes preview filter status
            </summary>
            <param name="filterType">The type of preview filter: both, left or right</param>
        </member>
        <member name="M:nsync.Settings.GetPreviewFilterStatus">
            <summary>
            Gets preview filter status
            </summary>
            <returns>Preview Filters: both, left or right</returns>
        </member>
        <member name="M:nsync.Settings.SetExcludeWindowStatus(System.Boolean)">
            <summary>
            Change the status of the exclude window
            </summary>
            <param name="status">This parameter indicates if the exclude window is enabled or disabled</param>
        </member>
        <member name="M:nsync.Settings.GetExcludeWindowStatus">
            <summary>
            Gets the current status of the Exclude Window
            </summary>
            <returns>Returns a boolean which indicates whether the exclude window is enabled or disabled</returns>
        </member>
        <member name="M:nsync.Settings.SetTrackBackStatus(System.Boolean)">
            <summary>
            Change the status of the TrackBack
            </summary>
            <param name="status">This parameter indicates if the trackback is enabled or disabled</param>
        </member>
        <member name="M:nsync.Settings.GetTrackBackStatus">
            <summary>
            Gets the current status of the TrackBack
            </summary>
            <returns>Returns an int which indicates whether the trackback is enabled or disabled. 0 means disabled. 1 means enabled. -1 means theres error</returns>
        </member>
        <member name="M:nsync.Settings.LoadFolderPaths">
            <summary>
            Loads the saved folder paths into a list
            </summary>
            <returns>Returns a list of strings which contains the saved folder paths</returns>
        </member>
        <member name="M:nsync.Settings.SaveFolderPaths(System.String,System.String)">
            <summary>
            Saves the current folder paths into settings.xml
            </summary>
            <param name="leftPath">This parameter will be saved into settings.xml</param>
            <param name="rightPath">This parameter will be saved into settings.xml</param>
        </member>
        <member name="M:nsync.Settings.SaveFile(System.Xml.XmlDocument,System.String)">
            <summary>
            Save XmlDocument
            </summary>
            <param name="doc">Document reference to XmlDocument</param>
            <param name="path">Path of the XmlDocument</param>
        </member>
        <member name="M:nsync.Settings.SaveFolderPathForRemoveableDisk(System.String,System.String,System.String)">
            <summary>
            Save folder path for removeable disk into settings.xml
            </summary>
            <param name="serialNumber">This parameter indicates the serial number of the removeable disk</param>
            <param name="leftPath">This parameter indicates the leftPath of the sync job</param>
            <param name="rightPath">This parameter indicates the rightPath of the sync job</param>
        </member>
        <member name="M:nsync.Settings.GetLastRemoveableDiskSync(System.String)">
            <summary>
            Gets last removeable thumbdrive
            </summary>
            <param name="serialNumber">Serial number of the thumbdrive plugged in</param>
            <returns>A string array containing the 2 folder paths</returns>
        </member>
        <member name="M:nsync.Settings.LoadExcludeData(System.String,System.String)">
            <summary>
            Load ExcludeData from settings.xml
            </summary>
            <param name="leftPath">Left path from the current sync job</param>
            <param name="rightPath">Right path from the current sync job</param>
            <returns>Saved exclude data</returns>
        </member>
        <member name="M:nsync.Settings.OpenLogFolder">
            <summary>
            Open log folder
            </summary>
            <returns>Message stating if the operation was a success or otherwise</returns>
        </member>
        <member name="M:nsync.Settings.ClearLogFolder">
            <summary>
            Clears logs in log folder
            </summary>
            <returns>Message stating if the operation was a success or otherwise</returns>
        </member>
        <member name="M:nsync.Settings.ClearMetaData">
            <summary>
            Clears Meta Data in current selected left and right folder
            </summary>
            <returns>Message stating if the operation was a success or otherwise</returns>
        </member>
        <member name="M:nsync.Settings.ClearSettings">
            <summary>
            Clears saved settngs
            </summary>
        </member>
        <member name="M:nsync.Settings.SetHomePage(nsync.HomePage)">
            <summary>
            References the HomePage
            </summary>
        </member>
        <member name="M:nsync.Settings.SetOwnerWindow(nsync.ExcludeWindow)">
            <summary>
            References ExcludeWindow (Overloaded Method) 
            </summary>
        </member>
        <member name="M:nsync.Settings.SetOwnerWindow(nsync.VisualPreviewWindow)">
            <summary>
            References VisualPreviewWindow (Overloaded Method)
            </summary>
        </member>
        <member name="M:nsync.Settings.IsFoldersLocked">
            <summary>
            Checks if log folder is locked.
            </summary>
        </member>
        <member name="M:nsync.Settings.SelectNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets a XMLNode from a XML document
            </summary>
            <param name="doc">This parameter indicates the XMLDocument to be read</param>
            <param name="path">This parameter indicates the tag of the XMLNode to search for</param>
            <returns>Returns a matching XMLNode</returns>
        </member>
        <member name="M:nsync.Settings.CheckSettingsXML(System.Xml.XmlDocument)">
            <summary>
            Checks if a XML document is properly formatted
            </summary>
            <param name="doc">This parameter is the XML document to be checked</param>
            <returns>Returns a boolean to indicate if the XML document is valid</returns>
        </member>
        <member name="M:nsync.Settings.CreateNewSettingsXML">
            <summary>
            Creates a new settings.xml
            </summary>
        </member>
        <member name="M:nsync.Settings.UnProtectFile(System.String)">
            <summary>
            Makes the file normal for editing
            </summary>
            <param name="file">File path to be unprotected</param>
        </member>
        <member name="M:nsync.Settings.ProtectFile(System.String)">
            <summary>
            Makes the file hidden and readOnly
            </summary>
            <param name="file">File path to be protected</param>
        </member>
        <member name="M:nsync.Settings.GetLeftAndRightFolderPath">
            <summary>
            Obtains the first 2 paths from settings.xml
            </summary>
            <returns>Left and right folder</returns>
        </member>
        <member name="M:nsync.Settings.DeleteAllMetaData(System.String)">
            <summary>
            Recursive method to delete metaData
            </summary>
            <param name="path">path to delete metadata</param>
        </member>
        <member name="M:nsync.Settings.GetSubFolder(System.String)">
            <summary>
            Recursive method to get all accessible Sub Folder
            </summary>
            <param name="path">path to check for sub folder</param>
            <returns>list of paths of accessible folders</returns>
        </member>
        <member name="M:nsync.Settings.CheckFolderExist">
            <summary>
            Check if the nsync folder exists in %APPDATA%
            </summary>
        </member>
        <member name="M:nsync.Settings.nsyncEmergencyClose">
            <summary>
            Does the steps to an emergency closing of nsync
            </summary>
            <returns>HelperManager window for emergency closing message</returns>
        </member>
        <member name="M:nsync.Settings.IsNsyncFolderLocked">
            <summary>
            Checks if nsync folder is locked.
            </summary>
            <returns>Whether nsync folder is locked</returns>
        </member>
        <member name="M:nsync.Settings.IsLogFolderLocked">
            <summary>
            Checks if log folder is locked.
            </summary>
            <returns>Whether log folder is locked</returns>
        </member>
        <member name="M:nsync.Settings.IsSettingsFileLocked">
            <summary>
            Checks if settings file is locked.
            </summary>
            <returns>Whether settings.xml is folder</returns>
        </member>
        <member name="M:nsync.Settings.IsNsyncFolderExists">
            <summary>
            Check if nsync folder exists, if not, create a new copy
            </summary>
            <returns>Whether nsync folder exists</returns>
        </member>
        <member name="M:nsync.Settings.IsLogFolderExists">
            <summary>
            Check if log folder exists, if not, create a new copy
            </summary>
            <returns>Whether log folder exists</returns>
        </member>
        <member name="M:nsync.Settings.IsSettingsFileExists">
            <summary>
            Check if settings.xml exists, if not, create a new copy
            </summary>
            <returns>Whether settings.xml exists</returns>
        </member>
        <member name="M:nsync.Settings.DeleteFile(System.String)">
            <summary>
            Method to delete file
            </summary>
            <param name="path">file path to delete</param>
        </member>
        <member name="P:nsync.Settings.Instance">
            <summary>
            Gets the instance of the Settings object
            </summary>
        </member>
        <member name="P:nsync.Settings.ExcludedData">
            <summary>
            Setter and Getter method excludeData
            </summary>
        </member>
        <member name="T:nsync.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:nsync.App.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Entry point when program startup
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:nsync.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:nsync.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:nsync.VisualPreviewWindow">
            <summary>
            Interaction logic for VisualPreviewWindow.xaml
            </summary>
            <summary>
            VisualPreviewWindow
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.#ctor">
            <summary>
            Constructor for VisualPreviewWindow
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.PathCompactPathEx(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Use Win32 Api for shortening paths
            </summary>
            <param name="pszOut"></param>
            <param name="szPath"></param>
            <param name="cchMax"></param>
            <param name="dwFlags"></param>
            <returns></returns>
        </member>
        <member name="M:nsync.VisualPreviewWindow.PathShortener(System.String,System.Int32)">
            <summary>
            Method to shorten paths to a certain length
            </summary>
            <param name="path">the full path</param>
            <param name="length">the length to shorten to</param>
            <returns>shortened string</returns>
        </member>
        <member name="M:nsync.VisualPreviewWindow.titleBar_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Enable the window to be dragged and moved on mousedown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.WindowVisualPreview_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            when the visual preview is loaded, fill the labels with the left and right folder paths
            display the preview information in the listview
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.DisplayInfo">
            <summary>
            Method to display no changes if there aren't any, change the combobox entry so preview listview loads
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.CheckEmptyList">
            <summary>
            Checks if list is empty, displays no changes message
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.AddBothPreviewEntry(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds an entry into the preview both list view
            </summary>
            <param name="previewLeftItem">left string</param>
            <param name="previewFileItem">filename string</param>
            <param name="previewRightItem">right string</param>
            <param name="previewToolTip">tooltip for filename string</param>
            <param name="previewColor">color of filename as a string (color keyword)</param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.AddLeftRightPreviewEntry(System.String,System.String,System.String,System.String)">
            <summary>
            Adds an entry into the preview leftright list view
            </summary>
            <param name="previewLeftRightFileName">filename string</param>
            <param name="previewLeftRightAction">action on file string</param>
            <param name="previewLeftRightToolTip">tooltip for filename string</param>
            <param name="previewLeftRightColor">color of filename as a string (color keyword)</param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.ComboBoxFilter_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            event handler when the filter combobox is changed, change the view of the list and the interface
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.LoadRightFilter">
            <summary>
            Load the right filtered list and interface
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.LoadLeftFilter">
            <summary>
            Load the left filtered list and interface
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.LoadBothFilter">
            <summary>
            Load the both filtered view of the list and the corresponding interface
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.LoadBothData">
            <summary>
            Load in the data to the data binding collection for the both filter
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.LoadLeftRightData(System.Boolean)">
            <summary>
            Load in the data to the data binding collection for the left and right filter
            </summary>
            <param name="IsLeft"></param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.FixWindowPosition">
            <summary>
            Fix the window postition so it's not out of the screen
            </summary>
        </member>
        <member name="M:nsync.VisualPreviewWindow.SortClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            event called on clicking on the header of a column
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.SortList(System.String,System.ComponentModel.ListSortDirection,System.Windows.Controls.ListView)">
            <summary>
            method to sort a listview list by a column
            </summary>
            <param name="sortBy">data name/parameter to sort by as a string</param>
            <param name="direction">Ascending or descending order</param>
            <param name="listView">Listview to be sorted</param>
        </member>
        <member name="M:nsync.VisualPreviewWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:nsync.VisualPreviewWindow.BothPreviewCollection">
            <summary>
            property of the preview collection used in binding
            </summary>
        </member>
        <member name="P:nsync.VisualPreviewWindow.LeftRightPreviewCollection">
            <summary>
            property of the preview collection used in binding
            </summary>
        </member>
        <member name="P:nsync.VisualPreviewWindow.LeftPath">
            <summary>
            Property for left path
            </summary>
        </member>
        <member name="P:nsync.VisualPreviewWindow.RightPath">
            <summary>
            Property for right path
            </summary>
        </member>
        <member name="P:nsync.VisualPreviewWindow.PreviewFileData">
            <summary>
            Property for filedata list
            </summary>
        </member>
        <member name="T:nsync.BothPreviewItemData">
            <summary>
            Simple data class of a preview item with 3 elements to fill the both filtered listview
            </summary>
        </member>
        <member name="P:nsync.BothPreviewItemData.bothLeft">
            <summary>
            property for left item column
            </summary>
        </member>
        <member name="P:nsync.BothPreviewItemData.bothRight">
            <summary>
            property for right tiem column
            </summary>
        </member>
        <member name="P:nsync.BothPreviewItemData.bothFileName">
            <summary>
            property for filename column
            </summary>
        </member>
        <member name="P:nsync.BothPreviewItemData.bothToolTip">
            <summary>
            property for tooltip
            </summary>
        </member>
        <member name="P:nsync.BothPreviewItemData.bothColor">
            <summary>
            property for color
            </summary>
        </member>
        <member name="T:nsync.LeftRightPreviewItemData">
            <summary>
            Simple data class of a preview item with 2 elements to fill the leftright filtered listview
            </summary>
        </member>
        <member name="P:nsync.LeftRightPreviewItemData.leftRightFileName">
            <summary>
            property for filename column
            </summary>
        </member>
        <member name="P:nsync.LeftRightPreviewItemData.leftRightAction">
            <summary>
            property for action column
            </summary>
        </member>
        <member name="P:nsync.LeftRightPreviewItemData.leftRightToolTip">
            <summary>
            property for tooltip
            </summary>
        </member>
        <member name="P:nsync.LeftRightPreviewItemData.leftRightColor">
            <summary>
            property for color
            </summary>
        </member>
        <member name="T:nsync.SummaryReport">
            <summary>
            SummaryReport generates a report if there are any files/folders that are not successfully synchronized by nsync.
            </summary>
        </member>
        <member name="M:nsync.SummaryReport.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor for SummaryReport when there are no changes
            </summary>
        </member>
        <member name="M:nsync.SummaryReport.#ctor(System.Collections.Generic.List{nsync.FileData},System.Collections.Generic.List{System.String})">
            <summary>
            Constructor for SummaryReport when there are some changes
            </summary>
        </member>
        <member name="M:nsync.SummaryReport.CheckFolderExist">
            <summary>
            Check whether log folder exists. If not create new.
            </summary>
        </member>
        <member name="M:nsync.SummaryReport.ParseErrorMessage">
            <summary>
            Method to Parse rename errors into another format
            </summary>
        </member>
        <member name="M:nsync.SummaryReport.CreateLog">
            <summary>
            Generates log data and writes to log file.
            </summary>
        </member>
        <member name="P:nsync.SummaryReport.LeftPath">
            <summary>
            Setter and Getter method for left folder path
            </summary>
        </member>
        <member name="P:nsync.SummaryReport.RightPath">
            <summary>
            Setter and Getter method for right folder path
            </summary>
        </member>
        <member name="P:nsync.SummaryReport.LogPath">
            <summary>
            Setter and Getter method for getting log path
            </summary>
        </member>
        <member name="T:nsync.GIFImageControl">
            <summary>
            GIFImageControl handles the GUI components for GIF images in the other pages.
            </summary>
        </member>
        <member name="F:nsync.GIFImageControl.AllowClickToPauseProperty">
            <summary>
            dependency property that can be set through styling, attached to the property to allow pause on click
            </summary>
        </member>
        <member name="F:nsync.GIFImageControl.GIFSourceProperty">
            <summary>
            dependency property attached to the gifsource property
            </summary>
        </member>
        <member name="F:nsync.GIFImageControl.PlayAnimationProperty">
            <summary>
            dependency property attached to the playanimation property
            </summary>
        </member>
        <member name="M:nsync.GIFImageControl.#ctor">
            <summary>
            Constructor for GIFImageControl
            </summary>
        </member>
        <member name="M:nsync.GIFImageControl.GIFImageControl_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            event handler when gif image control is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.GIFImageControl_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event handler when mouse leaves the gif image control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.GIFImageControl_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            event handler when the the left mouse button is up (after a click)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.GIFImageControl_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            event handler when the the left mouse button is down (after a click)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.FireClickEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            route the click event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.PlayAnimation_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            event handler when playanimation is changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.GetBitmapResourceFromAssembly(System.Reflection.Assembly)">
            <summary>
            Gets bitmaps for a resource assembly
            </summary>
            <param name="assemblyToSearch">the assembly to search for bitmaps</param>
            <returns>a gdi bitmap</returns>
        </member>
        <member name="M:nsync.GIFImageControl.SetImageGIFSource">
            <summary>
            Checks and sets the gifsource 
            </summary>
        </member>
        <member name="M:nsync.GIFImageControl.GIFSource_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            event handler when the gifsource is changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.OnFrameChanged(System.Object,System.EventArgs)">
            <summary>
            event handler when frame is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.GIFImageControl.OnFrameChangedInMainThread">
            <summary>
            method to carry out actions on frame changed, update frames
            </summary>
        </member>
        <member name="M:nsync.GIFImageControl.GetBitmapSource(System.Drawing.Bitmap)">
            <summary>
            method to get a bitmap source object from a gdi bitmap
            </summary>
            <param name="gdiBitmap">gdi 'bitmap' object</param>
            <returns>bitmap source object</returns>
        </member>
        <member name="M:nsync.GIFImageControl.DeleteObject(System.IntPtr)">
            <summary>
            GDI API call to delete (visual) object 
            </summary>
            <param name="hDc"></param>
            <returns></returns>
        </member>
        <member name="P:nsync.GIFImageControl.AllowClickToPause">
            <summary>
            Property whether click pauses or not
            </summary>
        </member>
        <member name="P:nsync.GIFImageControl.PlayAnimation">
            <summary>
            property to play the animation
            </summary>
        </member>
        <member name="P:nsync.GIFImageControl.GIFSource">
            <summary>
            property of the source of the gif
            </summary>
        </member>
        <member name="E:nsync.GIFImageControl.Click">
            <summary>
            routed event handler for click
            </summary>
        </member>
        <member name="T:nsync.FileData">
            <summary>
            Stores the information about each file (to be used for Preview and SummaryReport).
            </summary>
        </member>
        <member name="M:nsync.FileData.#ctor(System.String,System.String,System.String,nsync.Changes,System.Boolean)">
            <summary>
            Constructor of FileData class
            </summary>
        </member>
        <member name="P:nsync.FileData.FileName">
            <summary>
            Gets the FileName of FileData object
            </summary>
        </member>
        <member name="P:nsync.FileData.FileType">
            <summary>
            Gets the FileType of FileData object
            </summary>
        </member>
        <member name="P:nsync.FileData.ChangeType">
            <summary>
            Gets the ChangeType of FileData object
            </summary>
        </member>
        <member name="P:nsync.FileData.RootPath">
            <summary>
            Gets the RootPath of FileData object
            </summary>
        </member>
        <member name="P:nsync.FileData.RelativePath">
            <summary>
            Gets the RelativePath of FileData object
            </summary>
        </member>
        <member name="P:nsync.FileData.IsFolder">
            <summary>
            Checks whether fileData is a folder or a file
            </summary>
        </member>
        <member name="T:nsync.Changes">
            <summary>
            Types Of Changes In FileData Object
            </summary>
        </member>
        <member name="F:nsync.Changes.Create">
            <summary>
            Creation
            </summary>
        </member>
        <member name="F:nsync.Changes.Delete">
            <summary>
            Deletion
            </summary>
        </member>
        <member name="F:nsync.Changes.Update">
            <summary>
            Updating
            </summary>
        </member>
        <member name="F:nsync.Changes.Rename">
            <summary>
            Renaming
            </summary>
        </member>
        <member name="T:nsync.HelperManager">
            <summary>
            HelperManager provides method calls to display the helper window in nsync
            </summary>
        </member>
        <member name="M:nsync.HelperManager.#ctor(System.Windows.Window)">
            <summary>
            Constructor for HelperManager
            </summary>
            <param name="ownerWindow">Setting the owner of windowHelper to ownerWindow</param>
        </member>
        <member name="M:nsync.HelperManager.Show(System.String,System.Int32,nsync.HelperWindow.windowStartPosition)">
            <summary>
            Tell windowHelper to display the notification
            </summary>
            <param name="helpString">The string to be displayed in the notifiation window</param>
            <param name="priority">The piority of the window to be displayed</param>
            <param name="windowPosition">The position for which the notification window should be placed</param>
        </member>
        <member name="M:nsync.HelperManager.windowHelper_HyperTextMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            event handler for the mouse down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperManager.CloseWindow">
            <summary>
            Closes the notification window
            </summary>
        </member>
        <member name="M:nsync.HelperManager.UpdateMove">
            <summary>
            Moves the notification window accordingly when its position is changed
            </summary>
        </member>
        <member name="M:nsync.HelperManager.HideWindow">
            <summary>
            Hides the notification window
            </summary>
        </member>
        <member name="M:nsync.HelperManager.determineTimer(System.Int32)">
            <summary>
            Determines the duration for displaying the helper message
            </summary>
            <returns>The result is returned as an int</returns>
        </member>
        <member name="M:nsync.HelperManager.helperWindowIsOn">
            <summary>
            Checks if the notification window should be on/off
            </summary>
            <returns>The result is returned as a boolean</returns>
        </member>
        <member name="E:nsync.HelperManager.HyperTextMouseDown">
            <summary>
            event when the mouse is down on the hypertext portion of the helper window
            </summary>
        </member>
        <member name="P:nsync.HelperManager.ErrorCount">
            <summary>
            Setter and Getter method for errorCount
            </summary>
        </member>
        <member name="P:nsync.HelperManager.ConflictCount">
            <summary>
            Setter and Getter method for conflictCount
            </summary>
        </member>
        <member name="P:nsync.HelperManager.LogPath">
            <summary>
            Setter and Getter method for getting log path
            </summary>
        </member>
        <member name="P:nsync.HelperManager.IsRevertPathDialog">
            <summary>
            Setter and Getter method for getting log path
            </summary>
        </member>
        <member name="T:nsync.HelperWindow">
            <summary>
            Interaction logic for HelperWindow.xaml
            </summary>
            <summary>
            HelperWindow
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.#ctor">
            <summary>
            Constructor for HelperWindow class
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.SetSettings(System.String,System.Int32,nsync.HelperWindow.windowStartPosition,System.String,System.String)">
            <summary>
            Set the settings for notification window
            </summary>
            <param name="helpText">This is the string to be displayed</param>
            <param name="helpDuration">Duration for which the notification window should be active</param>
            <param name="windowPosition">The position where notification window should be displayed</param>
            <param name="hyperLinkPath"></param>
            <param name="hyperLinkText"></param>
        </member>
        <member name="M:nsync.HelperWindow.MoveWindow">
            <summary>
            Move the notification window accordingly when its position is changed
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.CloseWindow">
            <summary>
            Close the notification window
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.SetTime">
            <summary>
            Setup the settings for timer of notification window
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.dispatcherTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            This method is called to start the timer and will close the notification window when time is up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.windowHelper_MouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when a right mouse click is done on the notification window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.FormFadeOut_Completed(System.Object,System.EventArgs)">
            <summary>
            This method is called when the notification window has finished fading out
            <para>Notifcation window will be hidden after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.ButtonClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when the close button on the notification window is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.HyperLinkText_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when the the helperWindow textBlock is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.Border_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event handler for mouseenter the window, pause timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.Border_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event handler for mouseleave the window, start timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:nsync.HelperWindow.WindowActiveState">
            <summary>
            Get the state of the notification window
            </summary>
        </member>
        <member name="P:nsync.HelperWindow.MainWindow">
            <summary>
            Setter and Getter method for mainWindow
            </summary>
        </member>
        <member name="E:nsync.HelperWindow.HyperTextMouseDown">
            <summary>
            event when the mouse is down on the hypertext portion of the helper window
            </summary>
        </member>
        <member name="T:nsync.HelperWindow.windowStartPosition">
            <summary>
            A list of enumeration of the available positions for notification window
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.topLeft">
            <summary>
            Position window top left
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.topRight">
            <summary>
            Position window top right
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.bottomLeft">
            <summary>
            Position window bottom left
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.bottomRight">
            <summary>
            Position window bottom right
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.center">
            <summary>
            Position window centre
            </summary>
        </member>
        <member name="F:nsync.HelperWindow.windowStartPosition.windowTop">
            <summary>
            Position window top
            </summary>
        </member>
        <member name="T:nsync.TrackBackEngine">
            <summary>
            TrackBackEngine runs all the major operations such as backing up of folders and restoring folders.
            </summary>
        </member>
        <member name="M:nsync.TrackBackEngine.#ctor">
            <summary>
            Creates TrackBackEngine object
            </summary>
        </member>
        <member name="M:nsync.TrackBackEngine.StartBackup">
            <summary>
            Starts the backing up of folders
            </summary>
        </member>
        <member name="M:nsync.TrackBackEngine.StartRestore(System.String,System.String)">
            <summary>
            Starts the restoration of folders
            </summary>
            <param name="folderPath">The path of the original folder</param>
            <param name="dateTime">The version selected, indicated by the date and time</param>
        </member>
        <member name="M:nsync.TrackBackEngine.GetFolderVersions(System.String)">
            <summary>
            Retrieves the folder names of the different folder versions stored in TrackBack.
            </summary>
            <param name="folderPath">The folder path string</param>
            <returns>A string array of the folder names</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.GetFolderDestinations(System.String)">
            <summary>
            Retrieves the different folder destinations which the folder was synced to.
            </summary>
            <param name="folderPath">The folder path string</param>
            <returns>A string array of the folder destination paths</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.GetFolderTimeStamps(System.String)">
            <summary>
            Retrieves the dates and times of when the sync took place.
            </summary>
            <param name="folderPath">The folder path string</param>
            <returns>A string array of the dates and times of the sync sessions</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.hasEnoughDiskSpaceInLeftFolder">
            <summary>
            Checks that there is enough disk space in left folder for TrackBack to run smoothly
            </summary>
            <returns>If there is enough space for the folder to be copied, return true, false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.hasEnoughDiskSpaceInRightFolder">
            <summary>
            Checks that there is enough disk space in right folder for TrackBack to run smoothly
            </summary>
            <returns>If there is enough space for the folder to be copied, return true, false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.hasTrackBackData(System.String)">
            <summary>
            Checks that the folder has any previous stored versions in TrackBack.
            </summary>
            <param name="folderPath">The folder path string</param>
            <returns>If the folder has stored previous folder versions, return true, false otherwise.</returns>
        </member>
        <member name="M:nsync.TrackBackEngine.backgroundWorkerForTrackBackBackup_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Gets the background worker to start working and start backing up of folders
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackEngine.backgroundWorkerForTrackBackRestore_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Gets the background worker to start working and start restoring of folders
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.TrackBackEngine.BackupFolders">
            <summary>
            Stores a copy of the sync folder pair in a subfolder located inside the "_nsync_trackback" folder
            </summary>
        </member>
        <member name="M:nsync.TrackBackEngine.RestoreFolder(System.String,System.String)">
            <summary>
            Restores the folder back to its selected version
            </summary>
        </member>
        <member name="P:nsync.TrackBackEngine.LeftFolderPath">
            <summary>
            Getter method for left folder path
            </summary>
        </member>
        <member name="P:nsync.TrackBackEngine.RightFolderPath">
            <summary>
            Getter method for right folder path
            </summary>
        </member>
        <member name="P:nsync.TrackBackEngine.TimeStamp">
            <summary>
            Getter method for time stamp
            </summary>
        </member>
        <member name="T:nsync.TrackBackData">
            <summary>
            TrackBackData provides the folder information for TrackBackEngine
            </summary>
        </member>
        <member name="P:nsync.TrackBackData.FolderPath">
            <summary>
            Property for folder path
            </summary>
        </member>
        <member name="P:nsync.TrackBackData.DateTime">
            <summary>
            Property for time stamp
            </summary>
        </member>
        <member name="T:nsync.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.accessRightsInsufficient">
            <summary>
              Looks up a localized string similar to Insufficient access rights to the folders..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.bothFoldersNotExist">
            <summary>
              Looks up a localized string similar to Both the selected folders do not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.clearToolTip">
            <summary>
              Looks up a localized string similar to Clear Exclude List.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.closeToolTip">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.dateFormat">
            <summary>
              Looks up a localized string similar to yyyy-MM-dd.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.debugFolderPath">
            <summary>
              Looks up a localized string similar to \nsync\debug\.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.debugLoggerClosingMessage">
            <summary>
              Looks up a localized string similar to END OF DEBUG LOG.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.defaultErrorMessage">
            <summary>
              Looks up a localized string similar to Please try again..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeDragDropMessage">
            <summary>
              Looks up a localized string similar to Drag &amp; drop files and folders to exclude..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeFilesDescription">
            <summary>
              Looks up a localized string similar to Exclude All Files: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeFileTypesDescription">
            <summary>
              Looks up a localized string similar to Exclude File Type: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeFolderDescription">
            <summary>
              Looks up a localized string similar to Exclude Folder: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeIconToolTip">
            <summary>
              Looks up a localized string similar to Drag &amp; Drop Files or Folders to Exclude.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeInvalidDescription">
            <summary>
              Looks up a localized string similar to Not in synchronized folders: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeParentIncludedDescription">
            <summary>
              Looks up a localized string similar to Parent Folder Included: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeRemoveMessage">
            <summary>
              Looks up a localized string similar to Click on entries to remove them from the exclude list..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeRootFolder">
            <summary>
              Looks up a localized string similar to Cannot Exclude Root Folder: .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludeText">
            <summary>
              Looks up a localized string similar to Drag &amp; Drop Files or Folders to Exclude.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.excludingFileTypesException">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range of valid values..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.fileNotAccessible">
            <summary>
              Looks up a localized string similar to File(s) Open. Please Close File(s) And Try Again.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.filesOpenedExceptionMessage">
            <summary>
              Looks up a localized string similar to The process cannot access the file because it is being used by another process.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderExplorerText">
            <summary>
              Looks up a localized string similar to Select a folder to synchronise with nsync..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/folder.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderIOException">
            <summary>
              Looks up a localized string similar to nsync is having problems accessing the folder. Please close any applications that are using this folder or free up more disk space..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderMissingIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/folder_missing.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderNotExists">
            <summary>
              Looks up a localized string similar to The folder has file(s)/folder(s) that do not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderOnRemovableDiskRestored">
            <summary>
              Looks up a localized string similar to Your last synced folder pair on this removeable disk is restored..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderPathTooLong">
            <summary>
              Looks up a localized string similar to The folder has file(s)/folder(s) with path names exceeding the limit..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderRestrictedAccess">
            <summary>
              Looks up a localized string similar to The folder has file(s)/folder(s) with restricted file security permissions. Please close any applications that are using this folder..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.getSystemInfoErrorMessage">
            <summary>
              Looks up a localized string similar to Invalid table or properties.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.homeToolTip">
            <summary>
              Looks up a localized string similar to Home.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.insufficientDiskSpace">
            <summary>
              Looks up a localized string similar to Insufficient disk space.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderInsufficientDiskSpace">
            <summary>
              Looks up a localized string similar to Left folder has insufficient disk space..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderIOException">
            <summary>
              Looks up a localized string similar to nsync is having problems accessing the left folder. Please close any applications that are using this folder or free up more disk space..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderMRUPath">
            <summary>
              Looks up a localized string similar to /nsync/MRU/left1.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderNotExist">
            <summary>
              Looks up a localized string similar to The left folder does not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderNotExistsForTrackBack">
            <summary>
              Looks up a localized string similar to The left folder has file(s)/folder(s) that do not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderPathTooLong">
            <summary>
              Looks up a localized string similar to The left folder has file(s)/folder(s) with path names exceeding the limit..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderRestrictedAccess">
            <summary>
              Looks up a localized string similar to The left folder has file(s)/folder(s) with restricted file security permissions..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.logFolderPath">
            <summary>
              Looks up a localized string similar to \nsync\log\.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageAccessDeniedError">
            <summary>
              Looks up a localized string similar to Access is denied. .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageBackingUpFolders">
            <summary>
              Looks up a localized string similar to Backing up folders....
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageErrorDetected">
            <summary>
              Looks up a localized string similar to Error detected.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageLogFolderLocked">
            <summary>
              Looks up a localized string similar to Log Folder is Locked.\n Path : .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageNoListView">
            <summary>
              Looks up a localized string similar to Error: No listview visible!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageNsyncFolderLocked">
            <summary>
              Looks up a localized string similar to nsync Folder is Locked.\n Path : .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messagePreparingFolders">
            <summary>
              Looks up a localized string similar to Preparing folders....
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageRestoreCompleted">
            <summary>
              Looks up a localized string similar to Restore completed.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageRestoringFolders">
            <summary>
              Looks up a localized string similar to Restoring folders....
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageSettingsXmlLocked">
            <summary>
              Looks up a localized string similar to Settings File is Locked.\n Path : .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageSyncCompleted">
            <summary>
              Looks up a localized string similar to Sync completed.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageSyncingFolders">
            <summary>
              Looks up a localized string similar to Syncing folders....
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.messageSyncTerminated">
            <summary>
              Looks up a localized string similar to Sync terminated.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.metaDataFileExtension">
            <summary>
              Looks up a localized string similar to .metadata.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.metadataFileName">
            <summary>
              Looks up a localized string similar to filesync.metadata.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.minimiseToolTip">
            <summary>
              Looks up a localized string similar to Minimise.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.modifiedLeftPath">
            <summary>
              Looks up a localized string similar to nsync has modified the left folder path to help you sync to the correct place..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.modifiedRightPath">
            <summary>
              Looks up a localized string similar to nsync has modified the right folder path to help you sync to the correct place..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.nextToolTip">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.notApplicable">
            <summary>
              Looks up a localized string similar to n/a.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.nsyncFolderPath">
            <summary>
              Looks up a localized string similar to \nsync\.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.nsyncXMLFilename">
            <summary>
              Looks up a localized string similar to nsync.xml.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.nullString">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.panelIconToolTip">
            <summary>
              Looks up a localized string similar to Drag or Click to Add a Folder.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.panelText">
            <summary>
              Looks up a localized string similar to Drag &amp; Drop Folders Here.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.previewButtonToolTip">
            <summary>
              Looks up a localized string similar to Visual Preview.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.restoreComplete">
            <summary>
              Looks up a localized string similar to Restore done!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.restoreToolTip">
            <summary>
              Looks up a localized string similar to Restore folder.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderInsufficientDiskSpace">
            <summary>
              Looks up a localized string similar to Right folder has insufficient disk space..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderIOException">
            <summary>
              Looks up a localized string similar to nsync is having problems accessing the right folder. Please close any applications that are using this folder or free up more disk space..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderMRUPath">
            <summary>
              Looks up a localized string similar to /nsync/MRU/right1.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderNotExist">
            <summary>
              Looks up a localized string similar to The right folder does not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderNotExistsForTrackBack">
            <summary>
              Looks up a localized string similar to The right folder has file(s)/folder(s) that do not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderPathTooLong">
            <summary>
              Looks up a localized string similar to The right folder has file(s)/folder(s) with path names exceeding the limit..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderRestrictedAccess">
            <summary>
              Looks up a localized string similar to The right folder has file(s)/folder(s) with restricted file security permissions..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.settingsFilePath">
            <summary>
              Looks up a localized string similar to \nsync\settings.xml.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.settingsToolTip">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.settingsXMLFilename">
            <summary>
              Looks up a localized string similar to settings.xml.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.similarFolders">
            <summary>
              Looks up a localized string similar to The left and right folders cannot be similar..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.stopButtonToolTip">
            <summary>
              Looks up a localized string similar to Cancel Sync.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.subfolderOfFolder">
            <summary>
              Looks up a localized string similar to Folders that are to be synchronized cannot be a subfolder of each other..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.syncButtonToolTip">
            <summary>
              Looks up a localized string similar to And Sync!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.syncComplete">
            <summary>
              Looks up a localized string similar to Sync done!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.synchronizedFolders">
            <summary>
              Looks up a localized string similar to Folders are already synchronized..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.syncTerminated">
            <summary>
              Looks up a localized string similar to Sync terminated!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.thumbdriveIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/removabledrive.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.timeFormat">
            <summary>
              Looks up a localized string similar to hh.mm.ss tt.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.timeStampFormat">
            <summary>
              Looks up a localized string similar to yyyy-MM-dd hh.mm.ss tt.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackFolderName">
            <summary>
              Looks up a localized string similar to _nsync_trackback.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackMetaDataFileName">
            <summary>
              Looks up a localized string similar to _trackback.xml.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackPath">
            <summary>
              Looks up a localized string similar to /nsync/TrackBack.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackSessionPath">
            <summary>
              Looks up a localized string similar to /nsync/TrackBack/session.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackToolTip">
            <summary>
              Looks up a localized string similar to TrackBack.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackbackXMLFilename">
            <summary>
              Looks up a localized string similar to _trackback.xml.
            </summary>
        </member>
        <member name="T:nsync.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:nsync.MainWindow.#ctor">
            <summary>
            Constructor for MainWindow class
            </summary>
        </member>
        <member name="M:nsync.MainWindow.RenderBitmap(System.Windows.FrameworkElement)">
            <summary>
            Takes a snapshot of an object element
            </summary>
            <param name="element">This parameter is an object that will be snapshot</param>
            <returns>Returns a bitmap of the snapshot</returns>
        </member>
        <member name="M:nsync.MainWindow.titleBar_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the titlebar of MainWindow
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the exit button on MainWindow
            <para>nsync will exit after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonMinimise_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the minimize button on MainWindow
            <para>nsync will minimize to taskbar after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageSettings_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left dot on MainWindow
            <para>Current page will be switched to SettingsPage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageTrackBack_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the right dot on MainWindow
            <para>Current page will be switched to TrackBackPage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.WindowMain_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer is moved near the sides of MainWindow
            <para>Slider bars will be appear when mouse pointer is near it</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.viewList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This method is called when viewList.SelectedIndex is changed
            <para>The respective page will be loaded</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.UpdateToolTips">
            <summary>
            Updates the tooltips of the slider bars
            </summary>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageHome_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the center dot on MainWindow
            <para>Current page will be switched to HomePage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonSideTabLeft_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left sliderbar
            <para>Current page will be switched to the page on the left</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonSideTabRight_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left sliderbar
            <para>Current page will be switched to the page on the left</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageSettings_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event when mouse enters settings circle, show the tooltip
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ShowPageToolTip(System.String)">
            <summary>
            method to display a tooltip for the navigation circles
            </summary>
            <param name="toolTip"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPage_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event when mouse leaves any of the circles
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageHome_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event when mouse enters home circle, show the tooltip
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageTrackBack_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            event when mouse enters trackback circle, show the tooltip
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.SingleInstance">
            <summary>
            SingleInstance adds support for having a Single Instance Application in WPF
            </summary>
        </member>
        <member name="T:nsync.ExtensionMethods">
            <summary>
            Provides additional methods to check for backend operations.
            </summary>
        </member>
        <member name="M:nsync.ExtensionMethods.Contains(System.String[],System.String)">
            <summary>
            Extension method to check if an item is in a string array
            </summary>
            <param name="stringList">the list which will have the contains method</param>
            <param name="item">the string to check for in the list</param>
            <returns>true if its in the list</returns>
        </member>
        <member name="T:nsync.ExcludeWindow">
            <summary>
            Interaction logic for ExcludeWindow.xaml
            </summary>
            <summary>
            ExcludeWindow
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.#ctor">
            <summary>
            Constructor for ExcludeWindow
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.GetFileTypeList">
            <summary>
            Function to return list of File Types in Exclude Box
            </summary>
            <returns>List of File Types to be excluded in sync</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.GetFileNameList">
            <summary>
            Function to return list of File Names in Exclude Box
            </summary>
            <returns>List of File Names to be excluded in sync</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.GetFolderList">
            <summary>
            Function to return list of Folders in Exclude Box
            </summary>
            <returns>List of Folders to be excluded in sync</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.LoadExcludeData">
            <summary>
            Function to Load exclusion from settings to Exclude Box
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsync.ExcludeWindow.titleBar_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            enable the window to be dragged and moved on mousedown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ButtonClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            event handler when close window button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ButtonNext_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            event handler when continue/next button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.WindowExclude_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            event handler when the window is loaded. loads the paths of the left and right folders into the labels. populates file types.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.FixWindowPosition">
            <summary>
            Fix the window postition so it's not out of the screen
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.PathCompactPathEx(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Use Win32 Api for shortening paths
            </summary>
            <param name="pszOut"></param>
            <param name="szPath"></param>
            <param name="cchMax"></param>
            <param name="dwFlags"></param>
            <returns></returns>
        </member>
        <member name="M:nsync.ExcludeWindow.PathShortener(System.String,System.Int32)">
            <summary>
            Method to shorten paths to a certain length
            </summary>
            <param name="path">the full path</param>
            <param name="length">the length to shorten to</param>
            <returns>shortened string</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.PopulateFileTypes">
            <summary>
            populates the combobox with the file types present in the left and right folders
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.backgroundWorkerFileTypes_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            background worker for file stypes do work portion
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ProcessFile(System.String)">
            <summary>
            Process a valid file, add it to the list of filepaths
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ApplyAllFiles(System.String,System.Action{System.String})">
            <summary>
            Recursively search the directory and when a valid file is found, do something with it
            </summary>
            <param name="folder">folder to process</param>
            <param name="fileAction">delgate to do something to the filepath</param>
        </member>
        <member name="M:nsync.ExcludeWindow.backgroundWorkerFileTypes_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            backgroundworker complete for file types event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.PopulateFileTypesComboBox">
            <summary>
            adds entries from the list to the combobox.
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.AddComboBoxItem(System.String)">
            <summary>
            adds an item to the combobox
            </summary>
            <param name="fileExtension">string of the item to add</param>
        </member>
        <member name="M:nsync.ExcludeWindow.AddToFileTypesList(System.String)">
            <summary>
            adds the file type to a list object
            </summary>
            <param name="fileExtension">string of the file type to be added to the list</param>
        </member>
        <member name="M:nsync.ExcludeWindow.BoxExclude_DragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            event handler on dragging and object into the exclude box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.RemoveSubFolders(System.String)">
            <summary>
            remove the subfolders of a folder from the list
            </summary>
            <param name="folderPath">parent folder whoose subfolders are to be removed</param>
        </member>
        <member name="M:nsync.ExcludeWindow.IsSubFolder(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            checks if a folder is a subfolder of one of a list of current folders
            </summary>
            <param name="excludeFolderPaths">list of current folders</param>
            <param name="folderPath">folder to check</param>
            <returns>true when the folder is a subfolder of one in the list</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.IsSubFolderCheck(System.String,System.String)">
            <summary>
            checks if an folder is a child of another folder
            </summary>
            <param name="childPath">longer, child folder name</param>
            <param name="parentPath">shorter, parent folder name</param>
            <returns></returns>
        </member>
        <member name="M:nsync.ExcludeWindow.IsNotInList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            check if a string is in a string list or not
            </summary>
            <param name="ExcludeList">list of strings to check against</param>
            <param name="path">string to check</param>
            <returns>bool, true if string is not in list</returns>
        </member>
        <member name="M:nsync.ExcludeWindow.UpdateListBox">
            <summary>
            updates the listbox with items from the backend list
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.RefreshInterface">
            <summary>
            refresh the message displayed in the status label
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.AddListBoxItem(System.String,System.Windows.Media.Brush,System.String)">
            <summary>
            add an item to the listbox
            </summary>
            <param name="excludeStatement">string of the statement to add</param>
            <param name="itemColor">color of the string</param>
            <param name="tag">the actual path to be added to the tag property of the listbox item</param>
        </member>
        <member name="M:nsync.ExcludeWindow.SaveLastState">
            <summary>
            saves the previous state of all the backend lists
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.CopyList(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            copy one list to another
            </summary>
            <param name="source">the list to copy from</param>
            <param name="destination">the list to copy to</param>
        </member>
        <member name="M:nsync.ExcludeWindow.BoxExclude_DragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            event handler when items are dragged out without being dropped
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.RestoreLastState">
            <summary>
            restores the backend lists to their previous state
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.ClearListBox">
            <summary>
            clear the listbox in the gui
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.BoxExclude_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            event handler when items are dropped in the exclude box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ComboBoxFileType_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            event handler when the selection is changed in the combobox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ListBoxExclude_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            event handler when the mouse is clicked on an item in the exclude list box. delete the item.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.RestoreSubFolders(System.String)">
            <summary>
            restores subfolders of a folder from the invalid subfolder list to the valid folder list
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ButtonClear_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for clear button click, clears backend lists and listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.ClearLists">
            <summary>
            Functions to clear the backend lists
            </summary>
        </member>
        <member name="M:nsync.ExcludeWindow.ComboBoxFileType_DropDownOpened(System.Object,System.EventArgs)">
            <summary>
            event handler when the dropdown menu of comboxbox is opened
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.ExcludeWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:nsync.ExcludeWindow.LeftPath">
            <summary>
            Property for left path
            </summary>
        </member>
        <member name="P:nsync.ExcludeWindow.RightPath">
            <summary>
            Property for right path
            </summary>
        </member>
        <member name="P:nsync.ExcludeWindow.Cancel">
            <summary>
            Property for cancel to check;
            </summary>
        </member>
        <member name="E:nsync.ExcludeWindow.LogError">
            <summary>
            log error event
            </summary>
        </member>
        <member name="T:nsync.ExcludeWindow.LogHandler">
            <summary>
            delegate for a log handler
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
